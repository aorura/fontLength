#include <QtGui>
#include "LengthCalculationDummy8.h"

LengthCalculationDummy8::LengthCalculationDummy8() {
	qDebug() << "interface contruct" << endl;
	int temp[FONTS_CNT][ASCII_CNT] = {
//{unicode, font_pixel, unicode, font_pixel ~ },
{9,25,10,25,13,25,32,12,33,12,34,18,35,33,36,30,37,46,38,30,39,10,40,15,41,15,42,23,43,31,44,11,45,16,46,10,47,18,48,30,49,25,50,30,51,30,52,30,53,30,54,30,55,30,56,31,57,30,58,10,59,10,60,26,61,30,62,26,63,22,64,41,65,31,66,31,67,28,68,32,69,28,70,27,71,31,72,32,73,13,74,14,75,28,76,24,77,38,78,33,79,33,80,29,81,33,82,31,83,29,84,28,85,33,86,31,87,41,88,31,89,28,90,29,91,16,92,18,93,16,94,26,95,23,96,19,97,26,98,26,99,22,100,26,101,26,102,20,103,29,104,28,105,12,106,12,107,25,108,12,109,39,110,27,111,26,112,26,113,26,114,18,115,23,116,19,117,27,118,25,119,39,120,26,121,25,122,23,123,17,124,12,125,17,126,31},
{9,16,10,16,13,16,32,7,33,8,34,11,35,21,36,20,37,29,38,19,39,6,40,10,41,9,42,15,43,19,44,7,45,11,46,6,47,11,48,19,49,16,50,19,51,19,52,20,53,19,54,19,55,19,56,20,57,19,58,6,59,7,60,17,61,19,62,17,63,14,64,26,65,20,66,20,67,18,68,21,69,18,70,18,71,20,72,21,73,8,74,9,75,19,76,16,77,25,78,21,79,21,80,19,81,21,82,20,83,18,84,19,85,21,86,20,87,27,88,20,89,18,90,19,91,11,92,11,93,11,94,16,95,15,96,12,97,16,98,17,99,15,100,18,101,18,102,12,103,18,104,17,105,7,106,7,107,16,108,7,109,25,110,17,111,18,112,17,113,17,114,11,115,14,116,13,117,17,118,16,119,25,120,17,121,16,122,16,123,11,124,8,125,11,126,20},
{9,15,10,15,13,15,32,7,33,7,34,11,35,20,36,19,37,27,38,18,39,6,40,9,41,9,42,14,43,18,44,6,45,9,46,6,47,11,48,18,49,15,50,19,51,18,52,18,53,18,54,18,55,18,56,19,57,18,58,6,59,6,60,16,61,18,62,16,63,14,64,25,65,18,66,18,67,17,68,19,69,16,70,16,71,19,72,19,73,8,74,8,75,17,76,14,77,22,78,19,79,20,80,17,81,20,82,18,83,17,84,18,85,19,86,18,87,25,88,18,89,17,90,18,91,10,92,11,93,9,94,15,95,14,96,12,97,15,98,16,99,13,100,15,101,16,102,12,103,17,104,16,105,7,106,7,107,15,108,7,109,24,110,16,111,16,112,16,113,15,114,10,115,14,116,12,117,16,118,15,119,23,120,16,121,15,122,14,123,10,124,8,125,10,126,17},
{9,14,10,14,13,14,32,6,33,6,34,10,35,19,36,18,37,25,38,16,39,6,40,8,41,9,42,12,43,18,44,6,45,9,46,6,47,10,48,18,49,14,50,17,51,17,52,18,53,17,54,17,55,17,56,18,57,17,58,6,59,5,60,15,61,17,62,15,63,12,64,23,65,17,66,17,67,16,68,18,69,15,70,15,71,18,72,18,73,8,74,8,75,16,76,13,77,20,78,18,79,19,80,16,81,19,82,17,83,17,84,17,85,18,86,17,87,23,88,17,89,16,90,17,91,9,92,10,93,9,94,14,95,14,96,11,97,14,98,15,99,12,100,15,101,14,102,11,103,16,104,16,105,6,106,6,107,14,108,6,109,22,110,16,111,14,112,15,113,15,114,10,115,12,116,12,117,16,118,14,119,22,120,14,121,14,122,13,123,9,124,7,125,9,126,17},
{9,13,10,13,13,13,32,6,33,6,34,10,35,17,36,15,37,24,38,15,39,6,40,7,41,8,42,12,43,16,44,5,45,8,46,6,47,9,48,17,49,13,50,16,51,15,52,15,53,16,54,16,55,16,56,15,57,16,58,6,59,5,60,14,61,17,62,14,63,12,64,22,65,16,66,16,67,15,68,16,69,14,70,14,71,17,72,17,73,6,74,8,75,15,76,13,77,19,78,17,79,17,80,15,81,17,82,16,83,15,84,16,85,17,86,16,87,22,88,16,89,14,90,16,91,8,92,9,93,8,94,13,95,13,96,10,97,14,98,14,99,11,100,14,101,14,102,10,103,14,104,15,105,6,106,6,107,13,108,6,109,21,110,15,111,14,112,14,113,14,114,9,115,12,116,10,117,15,118,13,119,20,120,13,121,13,122,12,123,9,124,6,125,9,126,16},
{9,11,10,11,13,11,32,5,33,5,34,7,35,15,36,14,37,20,38,13,39,4,40,6,41,7,42,10,43,13,44,5,45,7,46,4,47,8,48,13,49,11,50,13,51,14,52,13,53,13,54,13,55,13,56,13,57,13,58,4,59,5,60,11,61,13,62,11,63,10,64,18,65,13,66,14,67,12,68,14,69,12,70,12,71,13,72,14,73,6,74,6,75,13,76,11,77,17,78,14,79,14,80,13,81,14,82,14,83,12,84,14,85,15,86,13,87,18,88,14,89,12,90,13,91,8,92,8,93,7,94,11,95,11,96,8,97,11,98,12,99,10,100,12,101,12,102,9,103,12,104,12,105,5,106,5,107,12,108,5,109,17,110,11,111,12,112,11,113,11,114,8,115,10,116,9,117,11,118,11,119,17,120,11,121,11,122,10,123,7,124,6,125,8,126,14},
{9,10,10,10,13,10,32,4,33,5,34,7,35,13,36,12,37,17,38,11,39,3,40,5,41,5,42,9,43,12,44,4,45,7,46,4,47,7,48,11,49,9,50,12,51,12,52,12,53,12,54,12,55,12,56,11,57,12,58,4,59,4,60,10,61,12,62,10,63,9,64,16,65,12,66,12,67,10,68,12,69,11,70,10,71,11,72,13,73,5,74,5,75,11,76,9,77,15,78,13,79,12,80,11,81,12,82,12,83,10,84,12,85,12,86,12,87,16,88,12,89,11,90,11,91,6,92,7,93,6,94,10,95,10,96,7,97,9,98,11,99,8,100,10,101,10,102,8,103,11,104,11,105,5,106,5,107,10,108,5,109,15,110,11,111,10,112,11,113,10,114,7,115,9,116,8,117,10,118,10,119,15,120,10,121,9,122,9,123,6,124,5,125,6,126,11},
{9,9,10,9,13,9,32,4,33,5,34,6,35,12,36,11,37,17,38,10,39,3,40,5,41,5,42,9,43,11,44,4,45,6,46,3,47,6,48,10,49,9,50,11,51,11,52,11,53,11,54,10,55,11,56,11,57,10,58,3,59,4,60,9,61,11,62,9,63,7,64,15,65,11,66,11,67,10,68,12,69,10,70,10,71,11,72,12,73,5,74,5,75,10,76,9,77,14,78,11,79,11,80,11,81,11,82,11,83,10,84,11,85,12,86,11,87,15,88,11,89,10,90,10,91,6,92,6,93,6,94,9,95,9,96,7,97,9,98,10,99,8,100,9,101,10,102,7,103,10,104,10,105,4,106,5,107,10,108,4,109,14,110,9,111,10,112,9,113,9,114,7,115,8,116,8,117,9,118,9,119,14,120,9,121,9,122,9,123,6,124,5,125,6,126,11},
{9,14,10,14,13,14,32,6,33,6,34,10,35,19,36,18,37,25,38,16,39,6,40,8,41,9,42,12,43,18,44,6,45,9,46,6,47,10,48,18,49,14,50,17,51,17,52,18,53,17,54,17,55,17,56,18,57,17,58,6,59,5,60,15,61,17,62,15,63,12,64,23,65,17,66,17,67,16,68,18,69,15,70,15,71,18,72,18,73,8,74,8,75,16,76,13,77,20,78,18,79,19,80,16,81,19,82,17,83,17,84,17,85,18,86,17,87,23,88,17,89,16,90,17,91,9,92,10,93,9,94,14,95,14,96,11,97,14,98,15,99,12,100,15,101,14,102,11,103,16,104,16,105,6,106,6,107,14,108,6,109,22,110,16,111,14,112,15,113,15,114,10,115,12,116,12,117,16,118,14,119,22,120,14,121,14,122,13,123,9,124,7,125,9,126,17}};

	for (int i=0; i < FONTS_CNT; ++i) {
		for (int j=0; j < ASCII_CNT; ++j) {
			fontDB[i][j] = temp[i][j];
		}
	}
}
const QStringList LengthCalculationDummy8::fetchFontFiles() const
{
	return QStringList();
}

const QStringList LengthCalculationDummy8::availableFonts() const
{
	QStringList fonts;

	for (int i=0; i < FONTS_CNT; ++i){
		fonts.append(QString("Type %1").arg(i+1));
	}

	return fonts;
}

const QStringList LengthCalculationDummy8::availableFonts(QString const & path) const
{
    Q_UNUSED(path);

	QStringList fonts;

	for (int i=0; i < FONTS_CNT; ++i){
		fonts.append(QString("Type %1").arg(i+1));
	}

	return fonts;
}

int LengthCalculationDummy8::calculateWidth(QString const & text, QString const & fontName, int const fontSize, 
        bool const bold, bool const italic, CalculateFontShowMessagesE const messages, unsigned int * const resultCode)
{
    Q_UNUSED(fontName); Q_UNUSED(fontSize); Q_UNUSED(bold); Q_UNUSED(italic); Q_UNUSED(messages);

	int width;
	int maxWidth(0);

	QStringList l(text.split('\n', QString::SkipEmptyParts));
	qDebug() << "calculatefontwidth:  " << text  << endl;
    for (QStringList::const_iterator pos = l.constBegin(), end = l.constEnd(); pos != end; ++pos)
    {
		qDebug() << "iter " << "text: " << text << " fontname: "  << fontName << endl;
		width = getFontLength(*pos, fontName);

		if (width > maxWidth)
			maxWidth = width;
	}

	if (resultCode)
		*resultCode = CalculationOk;

	return maxWidth;
}

int LengthCalculationDummy8::getFontLength(QString const &str, QString const &fontName) {
	int width = 0;
	int fontNum = getNumberFromQString(fontName) - 1;
	if (fontNum < 0)
		fontNum = 0;
	qDebug() << "font num: " << fontNum << endl;
	for (int i=0; i < str.size(); ++i) {
		wchar_t uni = str.at(i).unicode();
		for (int j=0; j < ASCII_CNT; j+=2) {
			if (fontDB[fontNum][j] == uni) {
				width += fontDB[fontNum][j+1];
				qDebug() << "font width: " << fontDB[fontNum][j+1] << " total: " << width << endl;
			}
		}
	}

	return width;
}

int LengthCalculationDummy8::getNumberFromQString(const QString &xString)
{
  QRegExp xRegExp("(-?\\d+(?:[\\.,]\\d+(?:e\\d+)?)?)");
  xRegExp.indexIn(xString);
  QStringList xList = xRegExp.capturedTexts();
  if (true == xList.empty())
  {
    return 0.0;
  }  
  return xList.begin()->toInt();
}

Q_EXPORT_PLUGIN2( LengthCalculationDummy8, LengthCalculationDummy8 )
